process ConvertedPhoton = 
{



 source = PoolSource 
  {
    # Number of events program should run
    #untracked vstring fileNames = {'file:ZSphoton50GeVRecHits10ev.root'}
    untracked vstring fileNames = {'file:/tmp/nancy/ele50GeVRecHits10ev.root'}	
    untracked int32 maxEvents = 2
  }



 # initialize magnetic field
 # include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

es_source magfield = XMLIdealGeometryESSource
{
                  FileInPath GeometryConfiguration ="Geometry/CMSCommonData/data/FieldConfiguration.xml"
                  #the proper root node is set in the xml file
                  string rootNodeName=""
}

es_module = VolumeBasedMagneticFieldESProducer
{
                   double findVolumeTolerance = 0.0
                   untracked bool cacheLastVolume = true
                   untracked bool timerOn = false
}

  # for the geometry:
  # full detector geometry
  include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"

 #--------------------------------
  # Ecalgeometry for clustering
  #--------------------------------
  es_module = EcalBarrelGeometryEP {}
  es_module = EcalEndcapGeometryEP {}
  es_module = HcalHardcodeGeometryEP {}
  es_module = CaloTowerHardcodeGeometryEP {}
  es_module = CaloGeometryBuilder {}



############### Tracker geometry #####################
include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
include "RecoTracker/GeometryESProducer/data/TrackerRecoGeometryESProducer.cfi"

 ### Pixel Clusterizer and RecHit producer modules
  include "RecoLocalTracker/SiPixelClusterizer/data/SiPixelClusterizer.cfi"
  include "RecoLocalTracker/SiPixelRecHits/data/SiPixelRecHits.cfi"

  ### SiliconStrip Clusterizer and RecHit producer modules
  include "RecoLocalTracker/SiStripClusterizer/data/SiStripClusterizer_SimData.cfi"
  include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitConverter.cfi"

include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"  

 # cluster producer
  module clusterproducer = IslandClusterProducer
  {

    string hitCollection = "EcalRecHitsEB"
    string hitProducer = "ecalrechit"
    string clusterCollection = "clusterCollection"
    untracked double IslandBarrelSeedThr = 2
    untracked double IslandEndcapSeedThr = 2
  }


  # supercluster producer
  module superclusterproducer = SuperClusterProducer
  {
    string superclusterCollection = "superclusterCollection"
  }


 # # cluster producer
 # module clusterproducer = HybridClusterProducer
 # {
 #   double HybridBarrelSeedThr = 2
 #   double HybridEndcapSeedThr = 2 
 #   int32 step = 14
 #   double ethresh = .5
 #   double ewing = 1.0
 #   double eseed = 1.0

#    string basicclusterCollection = "HybridBasicClusterCollection"
#    string superclusterCollection = "HybridSuperClusterCollection"
#  }



#   es_module seedFinder1= OutInConversionSeedFinderESProducer
#  {
#    string ComponentName = "OutInConversionSeedFinder"      
#  }

#  es_module trkFinder1= OutInConversionTrackFinderESProducer
#  {
#    string ComponentName = "OutInConversionTrackFinder"      
#  }


es_module mat1 = PropagatorWithMaterialESProducer {
    string ComponentName = "PropagatorWithMaterial"
    string PropagationDirection = "alongMomentum"
    double Mass = 0.105
  }



# nested parameter set for MeasurementTracker
#      PSet MeasurementTrackerParameters =
#      {
#         string PixelCPE = "PixelCPEParmError"
#         double NSigmaInside =3
#      }



  # Converted Photon Producer
  module convPhoProducer = ConvertedPhotonProducer
  {

    double NSigmaInside =3

    string scProducer   =     "superclusterproducer"
    string scCollection =     "superclusterCollection"
   # string outInSeedFinder =  "OutInConversionSeedFinder"
   # string outInTrackFinder =  "OutInConversionTrackFinder"
    string convertedPhotonCollection = "ConvertedPhotonCollection"
    

  }





 sequence s1 = { clusterproducer,superclusterproducer }
 sequence trackerRecHit = { pixClust,pixRecHitConverter, ThreeThresholdClusterizer,LocalMeasurementConverter}
 sequence convPho = { convPhoProducer}	 

 path p1 = { s1, trackerRecHit, convPho }
 


  module o1 = PoolOutputModule 
   { 
      untracked string fileName = "/tmp/nancy/ele50GeVConvPhoton100.root" 

      untracked vstring outputCommands = 
      {
        "keep *"
      }
   }
   endpath outpath = { o1 }





}


