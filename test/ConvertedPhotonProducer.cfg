process ConvertedPhoton = 
{

 source = PoolSource 
  {
    # Number of events program should run
    # untracked vstring fileNames = {'file:/tmp/nancy/RelVal102SingleEPt35.root'}
    untracked vstring fileNames = {'file:/tmp/nancy/RelVal102SingleGammaPt35.root'}	
   

    untracked int32 maxEvents = -1
  }


# initialize magnetic field
include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

include "Geometry/CMSCommonData/data/cmsMagneticFieldXML.cfi"

# for the geometry:
# full detector geometry
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"

#--------------------------------
# Ecalgeometry for clustering
#--------------------------------
#include "RecoEcal/EgammaClusterProducers/data/geometryForClustering.cff"
#include "Geometry/CaloEventSetup/test/data/testCaloConfiguration.cfi"

include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"

### Ecal clustering
# create sequence for island clustering
include "RecoEcal/EgammaClusterProducers/data/islandClusteringSequence.cff"

# hybrid clustering sequence
include "RecoEcal/EgammaClusterProducers/data/hybridClusteringSequence.cff"

# clusters in preshower
include "RecoEcal/EgammaClusterProducers/data/preshowerClusteringSequence.cff"

# create path with all clustering algos
# NB: preshower MUST be run after island clustering in the endcap
sequence ecalClusteringSequence = {
                                    islandClusteringSequence,
                                    hybridClusteringSequence,
                                    preshowerClusteringSequence
                                  }






############### Tracker geometry #####################
include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
include "RecoTracker/GeometryESProducer/data/TrackerRecoGeometryESProducer.cfi"

# stripCPE
include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"
include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitMatcher.cfi"

# pixelCPE
include "RecoLocalTracker/SiPixelRecHits/data/PixelCPEParmError.cfi"

#TransientTrackingBuilder
include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilder.cfi"

# MeasurementTracker
include "RecoTracker/MeasurementDet/data/MeasurementTrackerESProducer.cfi"

include "RecoTracker/CkfPattern/data/CkfTrajectoryBuilderESProducer.cfi"
# override some parameters for my own purposes

#TrajectoryBuilder
es_module TrajectoryBuilderForConversions = CkfTrajectoryBuilder from "RecoTracker/CkfPattern/data/CkfTrajectoryBuilderESProducer.cfi"

replace TrajectoryBuilderForConversions.ComponentName = "TrajectoryBuilderForConversions"

replace TrajectoryBuilderForConversions.minimumNumberOfHits = 3




# additional stuff for the tracker

es_module = KFUpdatorESProducer
{
  string ComponentName = "KFUpdator"
}

# Chi2MeasurementEstimatorESProducer
include "TrackingTools/KalmanUpdators/data/Chi2MeasurementEstimatorESProducer.cfi"

# KFTrajectoryFitterESProducer
include "TrackingTools/TrackFitters/data/KFTrajectoryFitterESProducer.cfi"

# KFTrajectorySmootherESProducer
include "TrackingTools/TrackFitters/data/KFTrajectorySmootherESProducer.cfi"

# KFFittingSmootherESProducer
include "TrackingTools/TrackFitters/data/KFFittingSmootherESProducer.cfi"

es_module MaterialPropagator = PropagatorWithMaterialESProducer {
  string ComponentName = "PropagatorWithMaterial"
  string PropagationDirection = "alongMomentum"
  double Mass = 0.105
  double MaxDPhi              = 1.6
}

es_module OppositeMaterialPropagator = PropagatorWithMaterialESProducer {
  string ComponentName = "PropagatorWithMaterialOpposite"
  string PropagationDirection = "oppositeToMomentum"
  double Mass = 0.105
  double MaxDPhi              = 1.6
}




#  producer of converted photons
include "RecoEgamma/EgammaPhotonProducers/data/convertedPhotons.cfi"


# sequence trackerRecHit = { siPixelClusters,siPixelRecHits,siStripClusters,siStripRecHits}

  sequence trackerRecHit  = { siStripClusters, siStripMatchedRecHits }


 sequence convPhoSeq = { convertedPhotons }

 path p1 = { ecalClusteringSequence,  convPhoSeq}



  module o1 = PoolOutputModule
   { 
      untracked string fileName = "/tmp/nancy/RecoConversionsFromSingleGammaPt35GeV.root"
      #untracked string fileName = "/tmp/nancy/RecoConversionsFromSingleElePt35GeV.root"	

      untracked vstring outputCommands =
      {
       "drop *", 
        "keep recoSuperClusters_*_*_*",
        "keep recoConvertedPhotons_*_*_*",
        "keep recoPhotons_*_*_*"
	
      }
   }


   endpath outpath = { o1 }





}


