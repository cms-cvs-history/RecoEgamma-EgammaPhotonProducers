process ConvertedPhoton = 
{


service = MessageLogger 
  {
  untracked vstring destinations   = { "/tmp/nancy/debugmessages.txt" }
  untracked vstring categories     = { "ConvertedPhotonAnalyzer", "ConvertedPhotonProducer", "ConversionTrackCandidateProducer", "ConversionSeesFinder", "ConversionTrackPairFinder", "ConversionVertexFinder",  "InOutConversionSeedFinder", "InOutConversionTrackFinder", "OutInConversionSeedFinder", "OutInConversionTrackFinder"}
  untracked vstring debugModules   = { "*" }
  untracked PSet debugmessages.txt = { untracked string threshold = "DEBUG"
                                       untracked PSet INFO            = { untracked int32 limit = 0 }
                                       untracked PSet DEBUG           = { untracked int32 limit = 0 }
			               untracked PSet ConvertedPhotonAnalyzer = { untracked int32 limit = 10000000}
                                       untracked PSet ConvertedPhotonProducer = { untracked int32 limit = 10000000}	
                                       untracked PSet ConversionTrackCandidateProducer = { untracked int32 limit = 10000000}
		                       untracked PSet ConversionSeedFinder = { untracked int32 limit = 10000000}
                                       untracked PSet ConversionTrackPairFinder = { untracked int32 limit = 10000000}
                                       untracked PSet ConversionVertexFinder = { untracked int32 limit = 10000000}
                                       untracked PSet OutInConversionSeedFinder = { untracked int32 limit = 10000000}
                                       untracked PSet OutInConversionTrackFinder = { untracked int32 limit = 10000000}
                                       untracked PSet InOutConversionSeedFinder = { untracked int32 limit = 10000000}
                                       untracked PSet InOutConversionTrackFinder = { untracked int32 limit = 10000000}

  }
} 


 source = PoolSource 
  {
    # Number of events program should run
    # untracked vstring fileNames = {'file:/tmp/nancy/RelVal102SingleEPt35.root'}
    untracked vstring fileNames = {'file:/tmp/nancy/RelVal120SingleGammaPt35.root'}	
   

    untracked int32 maxEvents = 100
  }


# initialize magnetic field
include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

include "Geometry/CMSCommonData/data/cmsMagneticFieldXML.cfi"

# for the geometry:
# full detector geometry
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"

#--------------------------------
# Ecalgeometry for clustering
#--------------------------------
#include "RecoEcal/EgammaClusterProducers/data/geometryForClustering.cff"
#include "Geometry/CaloEventSetup/test/data/testCaloConfiguration.cfi"

include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"

### Ecal clustering
# create sequence for island clustering
include "RecoEcal/EgammaClusterProducers/data/islandClusteringSequence.cff"

# hybrid clustering sequence
include "RecoEcal/EgammaClusterProducers/data/hybridClusteringSequence.cff"

# clusters in preshower
include "RecoEcal/EgammaClusterProducers/data/preshowerClusteringSequence.cff"

# create path with all clustering algos
# NB: preshower MUST be run after island clustering in the endcap
sequence ecalClusteringSequence = {
                                    islandClusteringSequence,
                                    hybridClusteringSequence,
                                    preshowerClusteringSequence
                                  }


# sequence trackerRecHit = { siPixelClusters,siPixelRecHits,siStripClusters,siStripRecHits}
 sequence trackerRecHit  = { siStripClusters, siStripMatchedRecHits }

# photon sequence
include "RecoEgamma/EgammaPhotonProducers/data/convertedPhotonSequence.cff"

# Tracking Truth
#  include "SimGeneral/TrackingAnalysis/data/trackingtruth.cfi"


# analyzer to make histos from super clusters
 include "RecoEgamma/EgammaPhotonProducers/data/convertedPhotonAnalyzer.cfi"


# path p1 = { ecalClusteringSequence, convertedPhotonSequence,  trackingtruth, convertedPhotonAnalyzer   }
path p1 = { ecalClusteringSequence, convertedPhotonSequence, convertedPhotonAnalyzer   }



  module o1 = PoolOutputModule
   { 
      untracked string fileName = "/tmp/nancy/RecoConversionsFromSingleGammaPt35GeV.root"
      #untracked string fileName = "/tmp/nancy/RecoConversionsFromSingleElePt35GeV.root"	

      untracked vstring outputCommands =
      {
         "drop *", 
         "keep *_g4SimHits_*_*",
         "keep edmHepMCProduct_*_*_*",
         "keep recoSuperClusters_*_*_*",
         "keep recoConvertedPhotons_*_*_*",
         "keep recoPhotons_*_*_*",
         "keep TrackCandidates_conversionTrackCandidates_*_*",
         "keep recoTracks_ckfInOutTracksFromConversions_*_*",
         "keep recoTracks_ckfOutInTracksFromConversions_*_*",
         "keep recoTrackExtras_ckfInOutTracksFromConversions_*_*",	
         "keep recoTrackExtras_ckfOutInTracksFromConversions_*_*"	
     }
   }


   endpath outpath = { o1 }




}


